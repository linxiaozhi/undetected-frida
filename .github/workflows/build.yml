name: undetected-frida

on:
  schedule:
  - cron: "0 9/12 * * *"
  workflow_dispatch:

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - name: Check for existing release
      id: check
      run: |
        frida_version="$(curl -fs https://api.github.com/repos/frida/frida/releases | jq -r .[].tag_name | sort -nr | head -n1)"
        frida_version="$(curl -fs https://api.github.com/repos/frida/frida/releases/latest | jq -r .tag_name)"
        echo "FRIDA_VERSION=${frida_version}" >> "${GITHUB_OUTPUT}"  # gh env?

        release_exists=0
        set +e
        curl -fso /dev/null "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${frida_version}"
        [ "${?}" -ne 0 ] || release_exists=1
        echo "RELEASE_EXISTS=${release_exists}" >> "${GITHUB_OUTPUT}"
    outputs:
      FRIDA_VERSION: ${{ steps.check.outputs.FRIDA_VERSION }}
      RELEASE_EXISTS: ${{ steps.check.outputs.RELEASE_EXISTS }}

  create:
    runs-on: ubuntu-latest
    needs:
    - check
    if: needs.check.outputs.RELEASE_EXISTS == '0'
    steps:
    - name: Create release
      id: create
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # might need to use bash arrays for adequate DRY quotation?
        curl_args="-fs -H 'Authorization: token ${GITHUB_TOKEN}'"
        api_args="${curl_args} -H 'Content-Type: application/json' -d@-"
        upload_args="${curl_args} -H 'Content-Type: application/octet-stream' -o /dev/null --data-binary @-"  # cat | curl --data-binary

        tmpfile="$(mktemp)"  # a bit excessive, but eh
        echo '{"tag_name":"${{ needs.check.outputs.FRIDA_VERSION }}","name":"${{ needs.check.outputs.FRIDA_VERSION }}","body":"${{ needs.check.outputs.FRIDA_VERSION }}","draft":true}' | curl -fs -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" -d@- "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" >"${tmpfile}"

        echo "RELEASE_ID=$(jq -r .id "${tmpfile}")" >> "${GITHUB_OUTPUT}"
        #echo "UPLOAD_URL=$(jq -r .upload_url "${tmpfile}")" >> "${GITHUB_OUTPUT}"
    outputs:
      RELEASE_ID: ${{ steps.create.outputs.RELEASE_ID }}

  build:
    runs-on: ubuntu-latest
    needs:
    - check
    - create
    if: needs.check.outputs.RELEASE_EXISTS == '0'
    strategy:
      matrix:
        arch:
        - arm64
        - arm
        - x86_64
        - x86
        #bin: ["server", "inject"]
        #devkit: ["core", "gum", "gumjs"]
        os:
        - android
        #target: ["core", "gum"]
    steps:
    - uses: actions/checkout@v4

    - name: Node 16 setup
      uses: actions/setup-node@v4
      with:
        node-version: 16

    - name: JDK 8 setup
      uses: actions/setup-java@v4
      with:
        java-version: "8"
        distribution: temurin

    - name: Python 3.12 setup
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: NDK 25c setup
      run: |
        curl -O -SL https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
        [ "$(sha1sum android-ndk-r25c-linux.zip | awk '{print $1}')" = "53af80a1cce9144025b81c78c8cd556bff42bd0e" ] || exit 1
        unzip android-ndk-r25c-linux.zip; rm android-ndk-r25c-linux.zip; mv -v android-ndk-r25c "${ANDROID_NDK%/*}/25.2.9519653"; export ANDROID_NDK="${ANDROID_NDK%/*}/25.2.9519653"
        export ANDROID_NDK_HOME="${ANDROID_NDK}" ANDROID_NDK_ROOT="${ANDROID_NDK}" ANDROID_NDK_LATEST_HOME="${ANDROID_NDK}"

    - name: Install dependencies
      run: |
        sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install -y build-essential tree ninja-build gcc-multilib g++-multilib lib32stdc++-9-dev flex bison libc6-dev libc6-dev-i386 upx xz-utils plzip zstd pigz

    - name: Build Frida
      run: |
        git clone --recurse-submodules https://github.com/frida/frida -b "${{ needs.check.outputs.FRIDA_VERSION }}"; cd frida
        for k in strongR-frida florida; do for i in "../${k}/"*; do pushd "${i##*/}"; for j in "../../${k}/${i##*/}/"*.patch; do patch -p1 <"${j}"; done; popd; done; done

        for j in core gum; do make "${j}-${{ matrix.os }}-${{ matrix.arch }}"; done  # target
        for j in core gum gumjs; do python releng/mkdevkit.py "frida-${j}" "${{ matrix.os }}-${{ matrix.arch }}" "build/devkits/${{ matrix.os }}/${{ matrix.arch }}/${j}"; done  # devkit

    - name: Ship artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh_release_put(){ curl -fs -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/octet-stream" -o /dev/null --data-binary "@${1}" "https://uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.create.outputs.RELEASE_ID }}/assets?name=${2}"; }

        export XZ_OPT="-9e -T0" ZSTD_NBTHREADS=0 ZSTD_CLEVEL=19
        ZSTD_OPT="-${ZSTD_CLEVEL:-22} --ultra -T${ZSTD_NBTHREADS:-0}" LZIP_OPT="-n$(nproc) -9" PIGZ="-p$(nproc) -11"  # GZIP="-9" PIGZ="${GZIP}"
        compr="xz ${XZ_OPT}:xz"

        cd frida
        gh_release_put frida-core/src/anti-anti-frida.py anti-anti-frida.py ||:

        for j in server inject; do  # bin
          #upx --lzma --best "build/frida-${{ matrix.os }}-${{ matrix.arch }}/bin/frida-${j}"

          #for compr in "xz ${XZ_OPT}:xz" "plzip ${LZIP_OPT}:lz"; do  # "pigz ${PIGZ}:gz" "zstd ${ZSTD_OPT}:zst"; do
          ${compr%:*} -k "build/frida-${{ matrix.os }}-${{ matrix.arch }}/bin/frida-${j}"
          gh_release_put "build/frida-${{ matrix.os }}-${{ matrix.arch }}/bin/frida-${j}.${compr#*:}" "${GITHUB_REPOSITORY##*/}-${j}-${{ needs.check.outputs.FRIDA_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.${compr#*:}"
          #done
        done

        for j in core gum gumjs; do  # devkit
          tar -cf "build/frida-${j}-devkit-${{ matrix.os }}-${{ matrix.arch }}.tar" -C "build/devkits/${{ matrix.os }}/${{ matrix.arch }}/${j}/" .

          #for compr in "xz ${XZ_OPT}:xz" "plzip ${LZIP_OPT}:lz"; do  # "pigz ${PIGZ}:gz" "zstd ${ZSTD_OPT}:zst"; do
          ${compr%:*} -k "build/frida-${j}-devkit-${{ matrix.os }}-${{ matrix.arch }}.tar"
          gh_release_put "build/frida-${j}-devkit-${{ matrix.os }}-${{ matrix.arch }}.tar.${compr#*:}" "${GITHUB_REPOSITORY##*/}-${j}-devkit-${{ needs.check.outputs.FRIDA_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.tar.${compr#*:}"
          #done
        done

        [ "$(echo ${{ matrix.arch }} | sed 's/64$//')" != "${{ matrix.arch }}" ] && bit_width=64 || bit_width=32
        #upx --lzma --best "build/frida-${{ matrix.os }}-${{ matrix.arch }}/lib/frida/${bit_width}/frida-gadget.so"

        #for compr in "xz ${XZ_OPT}:xz" "plzip ${LZIP_OPT}:lz"; do  # "pigz ${PIGZ}:gz" "zstd ${ZSTD_OPT}:zst"; do
        ${compr#*:} -k "build/frida-${{ matrix.os }}-${{ matrix.arch }}/lib/frida/${bit_width}/frida-gadget.so"
        gh_release_put "build/frida-${{ matrix.os }}-${{ matrix.arch }}/lib/frida/${bit_width}/frida-gadget.so.${compr#*:}" "${GITHUB_REPOSITORY##*/}-gadget-${{ needs.check.outputs.FRIDA_VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.so.${compr#*:}"
        #done

  publish:
    runs-on: ubuntu-latest
    needs:
    - create
    - build
    if: needs.check.outputs.RELEASE_EXISTS == '0'
    steps:
    - name: Publish release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo '{"draft":false}' | curl -fs -H "Authorization: token ${GITHUB_TOKEN}" -H "Content-Type: application/json" -d@- -o /dev/null -XPATCH "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ needs.create.outputs.RELEASE_ID }}"
